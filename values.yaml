cluster:
  name: kafka

nodepools:
  controllers:
    name: controller
    replicas: 1
    roles:
      - controller
    storage:
      type: jbod
      volumes:
        - id: 0
          type: persistent-claim
          size: 1Gi
          deleteClaim: false
          kraftMetadata: shared
    resources:
      limits:
        cpu: "1"
        memory: 2.5Gi
      requests:
        cpu: 200m
        memory: 100Mi

  brokers:
    name: broker
    replicas: 1
    roles:
      - broker
    storage:
      type: jbod
      volumes:
        - id: 0
          type: persistent-claim
          size: 1Gi
          deleteClaim: false
          kraftMetadata: shared
    resources:
      limits:
        cpu: "1"
        memory: 2.5Gi
      requests:
        cpu: 200m
        memory: 100Mi

kafka:
  version: "3.8.0"
  metadataVersion: "3.8-IV0"
  listeners:
    - name: plain
      port: 9092
      type: internal
      tls: false
    - name: tls
      port: 9093
      type: internal
      tls: true
  config:
    num.network.threads: 3
    num.io.threads: 8
    offsets.topic.replication.factor: 1
    transaction.state.log.replication.factor: 1
    transaction.state.log.min.isr: 1
    socket.send.buffer.bytes: 102400
    socket.receive.buffer.bytes: 102400
    socket.request.max.bytes: 104857600
    num.recovery.threads.per.data.dir: 1
    log.flush.interval.messages: 10000
    log.flush.interval.ms: 1000
    log.retention.hours: 1
    log.roll.hours: 3
    log.retention.bytes: 250000000
    log.segment.bytes: 1073741824
    log.retention.check.interval.ms: 300000
    allow.everyone.if.no.acl.found: true
    auto.create.topics.enable: false
    max.partition.fetch.bytes: 1048576
    max.request.size: 1048576
    message.max.bytes: 20000000
  metrics:
    enabled: true
    configMapName: kafka-metrics
    configMapKey: kafka-metrics-config.yml
  resources:
    limits:
      cpu: "1"
      memory: 2.5Gi
    requests:
      cpu: 200m
      memory: 100Mi
  jvmOptions:
    -Xms: "256m"
    -Xmx: "2048m"
  template:
    pod:
      metadata:
        annotations:
          linkerd.io/inject: "enabled"
          kubectl.kubernetes.io/default-container: "kafka"
          config.linkerd.io/image-pull-policy: "IfNotPresent"
          config.linkerd.io/proxy-cpu-request: "50m"
          config.linkerd.io/proxy-cpu-limit: "500m"
          config.linkerd.io/proxy-memory-request: "48Mi"
          config.linkerd.io/proxy-memory-limit: "512Mi"
          config.linkerd.io/proxy-outbound-connect-timeout: "5000ms"
    kafkaContainer:
      securityContext:
        capabilities:
          drop:
            - ALL
        seccompProfile:
          type: RuntimeDefault

entityOperator:
  topicOperator:
    enabled: true
  userOperator:
    enabled: false

cruiseControl:
  enabled: true
  metrics:
    enabled: true
    configMapName: cruise-control-metrics
    configMapKey: metrics-config.yml
  autoRebalance:
    addBrokersTemplate: my-add-brokers-rebalancing-template
    removeBrokersTemplate: my-remove-brokers-rebalancing-template

topicDefaults:
  partitions: 10
  replicas: 1
  config:
    flush.messages: 10000
    max.message.bytes: 20000000

#enable the mirror maker to mirror data from source kafka to target
mirrorMaker:
  enabled: false
  name: kafka-mirror-maker
  version: 3.8.0
  replicas: 1
  connectCluster: strimzi-cluster
  clusters:
    - alias: source-cluster
      bootstrapServers: kafka:9092
    - alias: strimzi-cluster
      bootstrapServers: kafka-kafka-bootstrap:9092
      config:
        config.storage.replication.factor: -1
        offset.storage.replication.factor: -1
        status.storage.replication.factor: -1
  mirrors:
    - sourceCluster: source-cluster
      targetCluster: strimzi-cluster
      sourceConnector:
        tasksMax: 1
        config:
          replication.factor: -1
          offset-syncs.topic.replication.factor: -1
          sync.topic.acls.enabled: "false"
          refresh.topics.interval.seconds: 600
      checkpointConnector:
        tasksMax: 1
        config:
          checkpoints.topic.replication.factor: -1
          sync.group.offsets.enabled: "false"
          refresh.groups.interval.seconds: 600
      topicsPattern: ".*"
      groupsPattern: ".*"
  metricsConfig:
    type: jmxPrometheusExporter
    configMapName: mirror-maker-2-metrics
    configMapKey: metrics-config.yml

#you can rename topics or customize their values
topics:
  - name: mytopic1
  - name: mytopic2

#customize the topic as so
#topics:
  # This topic uses its own config, overriding the defaults
  #- name: my-custom-topic
  #  partitions: 12
  #  replicas: 3
  #  config:
  #    retention.ms: 3600000
  #    cleanup.policy: compact
  #    segment.ms: 600000
  #    max.message.bytes: 50000000
